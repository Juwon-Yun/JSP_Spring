/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-11-02 06:54:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1635235192466L));
    _jspx_dependants.put("jar:file:/E:/Java_workspace/6.jspSpring/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/springProj/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/bootstrap.min.css\">\r\n");
      out.write("<title>아작스를 통한 이미지 업로드</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	.imgs_wrap{\r\n");
      out.write("		width: 300px;\r\n");
      out.write("		margin-top: 50px;\r\n");
      out.write("	}\r\n");
      out.write("	.imgs_wrap img{\r\n");
      out.write("		max-width: 100%;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"jumbotron\">\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<h1 class=\"display-3\">아작스를 통한 이미지 업로드</h1>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<div class=\"form-group row\">\r\n");
      out.write("		<label class=\"col-sm-2\">이미지</label>\r\n");
      out.write("		<div class=\"col-sm-3\">\r\n");
      out.write("			<input type=\"file\" name=\"uploadFile\" id=\"input_img\" multiple>		\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"col-sm-offset-2 col-sm-10\">\r\n");
      out.write("			<input id=\"uploadBtn\" type=\"button\" class=\"btn btn-primary\" value=\"업로드\">\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<div class=\"imgs_wrap\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"/resources/js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("	//이미지 미리보기\r\n");
      out.write("	var sel_file = [];\r\n");
      out.write("	\r\n");
      out.write("	//input type=file의 id=input_img...\r\n");
      out.write("	$('#input_img').on('change', handleImgFileSelect);\r\n");
      out.write("	\r\n");
      out.write("	function handleImgFileSelect(e){\r\n");
      out.write("		// 이벤트가 발생된 타겟 안에 들어있는 이미지 파일들\r\n");
      out.write("		var files = e.target.files;\r\n");
      out.write("		// 이미지가 여러개 있을 수 있으므로 이미지들을 분리해서 배열로 만든다 \r\n");
      out.write("		var filesArr = Array.prototype.slice.call(files);\r\n");
      out.write("		\r\n");
      out.write("		// 파일 타입의 배열 반복, f는 배열 안에 들어있는 이미지 파일 객체\r\n");
      out.write("		filesArr.forEach(function(f){\r\n");
      out.write("			// 이미지 파일이 아닌 경우 이미지 미리보기 실패\r\n");
      out.write(" 			if(!f.type.match(\"image.*\")){\r\n");
      out.write("				alert(\"이미지 확장자만 사용 가능합니다.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 미리 선언된 전역변수(배열)에 이미지 객체를 f 대신 전역변수에 할당\r\n");
      out.write("			sel_file.push(f);\r\n");
      out.write("			\r\n");
      out.write("			// 이미지 객체를 읽을 reader 객체 생성\r\n");
      out.write("			var reader = new FileReader();\r\n");
      out.write("			\r\n");
      out.write("			// e : onchange 이벤트가 발생된 그 객체\r\n");
      out.write("			reader.onload = function(e){\r\n");
      out.write("				// e.target(이미지 객체)\r\n");
      out.write("				// e.target.result(reader가 이미지를 다 읽은 결과)\r\n");
      out.write("				var img_html = \"<img src=\\\"\" + e.target.result + \"\\\" />\";\r\n");
      out.write("				// div 사이에 이미지가 렌더링되어 화면에 보임\r\n");
      out.write("				$(\".imgs_wrap\").append(img_html);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// reader를 다음 이미지 파일(f)을 위해 초기화\r\n");
      out.write("			reader.readAsDataURL(f);\r\n");
      out.write("			\r\n");
      out.write("		}); // end foreach\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 정규식 변수 선언\r\n");
      out.write("	var regex = new RegExp(\"(.*?)\\.(exe|sh|zip|alz|pdf|txt|pptx|word)$\");\r\n");
      out.write("	// 해당 확장자들은 쓰지 못하게막는다.\r\n");
      out.write("	\r\n");
      out.write("	// 5Mb\r\n");
      out.write("	var maxSize = 5242880;\r\n");
      out.write("	\r\n");
      out.write("	// 파일명과 파일크기를 체크하는 함수\r\n");
      out.write("	function ckeckExtension(fileName, fileSize){\r\n");
      out.write("		// 파일 크기 체크\r\n");
      out.write("		if(fileSize >= maxSize){\r\n");
      out.write("			alert(\"파일 사이즈 초과\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 파일명의 정규식 체크\r\n");
      out.write("		if(regex.test(fileName)){\r\n");
      out.write("			alert(\"해당 확장자 파일을 업로드할 수 없습니다.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//문제가 없다면\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$('#uploadBtn').click((e)=>{\r\n");
      out.write("		// jQuery를 이용하여 파일 업로드 하기위해\r\n");
      out.write("		// FormData 객체(가상의 form 태그)를 이용한다.\r\n");
      out.write("		// 해당 객체에 필요한 파라미터를 담아서 전송함\r\n");
      out.write("		var formData = new FormData();\r\n");
      out.write("		\r\n");
      out.write("		// input 요소에 name 속성의 값이 uploadFile인 것을 찾아서\r\n");
      out.write("		// 자바스크립트의 inputFile 객체에 할당\r\n");
      out.write("		var inputFile =  $('input[name=\"uploadFile\"]');		\r\n");
      out.write("		// 첫 번째 파일 요소 안에 업로드 할 이미지들이 있는데\r\n");
      out.write("		// 그 이미지 객체들을 files 객체에 할당\r\n");
      out.write("		var files = inputFile[0].files;\r\n");
      out.write("		\r\n");
      out.write("		// console.log(\"files : \" + files);\r\n");
      out.write("		// 결과) files : [object FileList]\r\n");
      out.write("		\r\n");
      out.write("		// 파일 객체(files)를 가상의 form(formData)에 추가\r\n");
      out.write("		for(var i = 0; i < files.length; i++){\r\n");
      out.write("			// 조건식이 false이면 if문 실행됨\r\n");
      out.write("			// true면 통과, false면 문제발생\r\n");
      out.write("			if(!ckeckExtension(files[i].name, files[i].size)){\r\n");
      out.write("				//프로그램 종료\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//uploadFile이라는 이름으로 files[i] 하나씩 붙인다\r\n");
      out.write("			formData.append(\"uploadFile\", files[i]);	\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		// console.log(\"formData : \"+formData);\r\n");
      out.write("		// 결과) formData : [object FormData]\r\n");
      out.write("		\r\n");
      out.write("		// ajax를 통해서 formData 자체를 전송 할 경우\r\n");
      out.write("		// processData : false, contentType : false 를 꼭 기재해야 함.\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/uploadAjaxAction',\r\n");
      out.write("			processData : false,\r\n");
      out.write("			contentType : false,\r\n");
      out.write("			type: 'POST',\r\n");
      out.write("			data: formData,\r\n");
      out.write("			async : false,\r\n");
      out.write("			success:function(result){\r\n");
      out.write("				alert(\"uploaded\");\r\n");
      out.write("				console.log(result);				\r\n");
      out.write("			},\r\n");
      out.write("			error:function(){},\r\n");
      out.write("		});\r\n");
      out.write("	})\r\n");
      out.write("})\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

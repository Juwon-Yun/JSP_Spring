package kr.or.ddit.controller;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import net.coobird.thumbnailator.Thumbnailator;

@Controller
public class UploadController {
		
	private static final Logger logger = LoggerFactory.getLogger(UploadController.class);
	
	// 파일 업로드 폼
//	@GetMapping("/uploadForm")
	@RequestMapping(value = "/uploadForm", method = RequestMethod.GET)
	public String uploadFormAction(){
		
		logger.info("uploadForm");
		
		return "uploadForm";
	}
	
	// 파일 업로드 처리
	// @RequestMapping(value = "uploadForm", method = RequestMethod.POST) 와 같은 역할을 한다
	@PostMapping("/uploadFormAction")
	public String uploadFormPost(MultipartFile[] uploadFile, Model model) {
		String uploadFolder = "E:\\Java_workspace\\6.jspSpring\\springProj\\src\\main\\webapp\\resources\\upload";
		
		List<String> list = new ArrayList<>();
		
		for (MultipartFile multipartFile : uploadFile) {
			logger.info("-------------------");
			logger.info("업로드 파일명 : " + multipartFile.getOriginalFilename());
			logger.info("업로드 파일 크기 : " + multipartFile.getSize());
			logger.info("-------------------");
			
			File saveFile = new File(uploadFolder, multipartFile.getOriginalFilename());
			try {
				//transferTo() 메소드의 파라미터 : java.io.File의 객체
				multipartFile.transferTo(saveFile);
				list.add(multipartFile.getOriginalFilename());
			}catch(Exception e) {
				logger.error(e.getMessage());
			}// end catch
		} // end foreach 
		
		model.addAttribute("list",list);
		
		return "uploadFormPost";
	}
	
	// 아작스 이미지 업로드 폼
	@RequestMapping("/uploadAjax")
	public void uploadAjax() {
		logger.info("upload Ajax");
		// /uploadAjax URI 주소와 uploadAjax.jsp의 위치 및 파일명이 
		// 동일하여 return 생략 가능하다
	}
	
	// 아작스 이미지 업로드 실행
	@PostMapping("/uploadAjaxAction")
	public void uploadAjaxAction(MultipartFile[] uploadFile) {
		logger.info("update ajax post......");
		
		String uploadFolder = "E:\\Java_workspace\\6.jspSpring\\springProj\\src\\main\\webapp\\resources\\upload";
		
		//=========날짜 계층형 폴더 생성 시작=========
		File uploadPath = new File(uploadFolder, getFolder());
		
		// ......\\webapp\\resources\\upload\\2021\\11\\02 로 찍힌다
		logger.info("uploadPath =>  "+uploadPath);
		
		// 생성될 폴더가 존재하지 않으면 해당 폴더들을 생성
		if(!uploadPath.exists()) {
			uploadPath.mkdirs();
		}
		//=========날짜 계층형 폴더 생성 끝=========
		
		for (MultipartFile multipartFile : uploadFile) {
			logger.info("---------------------------");
			// IE에서는 파일명 : C:\Users\SEM-PC\Pictures\개똥이.jpg
			logger.info("파일명 : " + multipartFile.getOriginalFilename());
			logger.info("파일크기 : " + multipartFile.getSize() + " byte");
			logger.info("---------------------------");
			// 실제 파일명
			String uploadFileName = multipartFile.getOriginalFilename();
			
			// IE에서의 파일명의 경로를 처리하는 과정이 따로 필요하다 (절대경로로 나옴)
			uploadFileName.substring(uploadFileName.lastIndexOf("\\")+1);
			logger.info("IE를 위해 처리한 파일명 : "  + uploadFileName);
			
			// java.util.UUID를 통해 파일 중복 방지
			// randomUUID() : 16비트의 임의의 값 생성
			UUID uuid = UUID.randomUUID();
			uploadFileName = uuid.toString() +"_"+ uploadFileName;
			
			// 1) 복사할 주소, 2) 파일명 이 필요하다
			// File saveFile = new File(uploadFolder, uploadFileName);
			
			// 계층형 날짜 폴더에 맞는 파일 주소로 파일 경로 설정
			File saveFile = new File(uploadPath, uploadFileName);
			
			FileOutputStream thumnail = null;
//			BufferedOutputStream bos = null;
			
			// 파일을 해당 주소로 복사하려면 파라미터가 file 객체여야 한다.
			try {
				multipartFile.transferTo(saveFile);
				
				//========썸네일 이미지 만들기 시작========
				// /uploadAjax를 통해 이미지 업로드 하면
				// 1) 원본 이미지 파일 저장 
				// 2) s_원본이미지 파일(썸네일) 저장
				// but) 일반 파일은 그냥 업로드만 됨
				
				//이미지 인지 체크
				if(checkImageType(saveFile)) {
					// 바이너리 형태로 출력
					// 썸네일 => (소문자)s_이미지파일명(바이너리 파일 생성)
					thumnail =  new FileOutputStream(
										new File(uploadPath, "s_"+uploadFileName));
//					bos = new BufferedOutputStream(thumnail);
					// 썸네일 라이브러리 사용
					// InputStream과 java.io.File 객체를 이용하여
					// 썸네일 파일 생성 width:100px, height:100px
					Thumbnailator.createThumbnail(
										multipartFile.getInputStream(),
										thumnail,
										100, 100);
				}
				//========썸네일 이미지 만들기  끝========
				
			} catch (IllegalStateException | IOException e) {
				logger.error(e.getMessage());
			}finally {
				// 자원 반납
				if(thumnail != null) try{thumnail.close();} catch (IOException e) {e.printStackTrace();}
//				if(bos != null) try{bos.close();} catch (IOException e) {e.printStackTrace();}
			}
		}// end for
		
	}
	
	private String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		Date date = new Date();
		
		// ex) str : 2021-11-02
		// 날짜가 SimpleDateFormat 형태로 변환됨
		String str = sdf.format(date);
		
		return str.replace("-", File.separator);
	}
	
	// 이미지의 경우에만 섬네일 제작
	private boolean checkImageType(File file) {
		// Multipurpose Internet Mail Extensions의 약자
		// Content-Type 헤더에 의해 지정되는데, 이 값은 표준 MIME-Type의 하나이다.
		// MIME-Type을 살펴봄으로써 브라우져는 데이터를 나타내는데 어떤 종류의 파일 Stream인지를 알고 있다
		// MIME 타입을 통해 이미지 여부 확인
		try {
			// file.toPath() : 파일 객체를 path객체로 변환
			String contentType = Files.probeContentType(file.toPath());
			logger.info("contentType => " + contentType);
			
			//MIME 타입 정보가 image로 시작하는지 여부를 return
			return contentType.startsWith("image");
			
		} catch (IOException e) {
			logger.error(e.getMessage());
		}
		
		// 이 파일은 이미지가 아니다.
		return false;
	}
	
	
	
	
}
